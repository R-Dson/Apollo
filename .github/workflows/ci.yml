      
name: CI Native Build
permissions:
  contents: read # Default for most jobs

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build_linux_native:
    name: Build Linux Native Binary
    runs-on: ubuntu-22.04
    permissions:
      contents: write # Needed for create-release-action to create releases and upload assets
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Fetch all history to get tags for versioning if needed

      - name: Get Version Information
        id: version_info
        run: |
          # For tag pushes, use the tag name as the version
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION_TAG="${{ github.ref_name }}"
            PUBLISH_RELEASE="true"
          else
            # For other pushes (e.g., to master) or PRs, use commit SHA for artifact naming
            # and don't publish a release from these directly.
            VERSION_TAG="dev-$(echo $GITHUB_SHA | cut -c1-7)"
            PUBLISH_RELEASE="false"
          fi
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "PUBLISH_RELEASE=${PUBLISH_RELEASE}" >> $GITHUB_OUTPUT
          echo "Determined Version Tag: ${VERSION_TAG}"
          echo "Publish Release: ${PUBLISH_RELEASE}"

      - name: Install Build Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libssl-dev \
            libcurl4-openssl-dev \
            libdrm-dev \
            libgl-dev \
            libwayland-dev \
            libx11-xcb-dev \
            libxcb-dri3-dev \
            libxfixes-dev \
            libopus-dev \
            nlohmann-json3-dev \
            libminiupnpc-dev \
            libcap-dev \
            libva-dev \
            libva-drm2 \
            libayatana-appindicator3-dev \
            libnotify-dev \
            libevdev-dev \
            libxcb-xfixes0-dev \
            libgbm-dev \
            libnuma-dev \
            libpulse-dev \
            libx11-dev \
            libxcb-shm0-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxtst-dev \
            libudev-dev

      - name: Configure Build
        run: |
          mkdir build
          cmake -B build -G Ninja -S . \
            -DCMAKE_BUILD_TYPE=Release -DSUNSHINE_ENABLE_CUDA=OFF -DCMAKE_BUILD_TYPE=Release -DSUNSHINE_ENABLE_WAYLAND=ON -DSUNSHINE_ENABLE_X11=ON-DSUNSHINE_ENABLE_DRM=ON -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF -DSUNSHINE_BUILD_APPIMAGE=OFF
            # If Apollo's CMake can take a version, you could pass ${{ steps.version_info.outputs.VERSION_TAG }}
            # Example: -DAPOLLO_VERSION="${{ steps.version_info.outputs.VERSION_TAG }}"

      - name: Show CMake Logs
        if: always() # Run even if previous steps fail
        run: |
          echo "--- CMakeOutput.log ---"
          cat build/CMakeFiles/CMakeOutput.log || echo "CMakeOutput.log not found"
          echo "--- CMakeError.log ---"
          cat build/CMakeFiles/CMakeError.log || echo "CMakeError.log not found"

      - name: Compile Apollo
        run: ninja -C build -v

      - name: Prepare Artifact
        run: |
          mkdir -p artifacts
          # !!! VERIFY this executable name and path after compilation !!!
          EXECUTABLE_NAME="apollo"
          EXECUTABLE_PATH="build/${EXECUTABLE_NAME}" # Assumes executable is in the root of the build dir

          if [ ! -f "${EXECUTABLE_PATH}" ]; then
            echo "Error: Binary not found at ${EXECUTABLE_PATH}"
            echo "Listing contents of build directory to help debug:"
            ls -R build
            exit 1
          fi
          chmod +x "${EXECUTABLE_PATH}"
          # Use the determined version tag for the artifact name
          cp "${EXECUTABLE_PATH}" ./artifacts/${EXECUTABLE_NAME}-${{ steps.version_info.outputs.VERSION_TAG }}-linux-x86_64
          echo "Binary prepared: ./artifacts/${EXECUTABLE_NAME}-${{ steps.version_info.outputs.VERSION_TAG }}-linux-x86_64"

      - name: Upload Native Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: apollo-linux-native-binary
          path: artifacts/ # Uploads the entire artifacts directory
          if-no-files-found: error

      - name: Create GitHub Release
        # Only run if PUBLISH_RELEASE is true (which we set for tag pushes)
        if: steps.version_info.outputs.PUBLISH_RELEASE == 'true' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          # GITHUB_TOKEN is automatically provided by GitHub
          tag_name: ${{ github.ref_name }} # Use the tag that triggered the workflow
          name: "Apollo ${{ github.ref_name }}"
          body: "Release for Apollo ${{ github.ref_name }}. Add release notes here or link to changelog."
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }} # Mark as pre-release if tag has e.g. -beta, -alpha
          # Ensure the files glob matches the naming convention from "Prepare Artifact" step for the tagged release
          files: "artifacts/*${{ github.ref_name }}*-linux-x86_64"
